{"version":3,"sources":["TypeSelector.tsx","index.tsx"],"names":["TypeSelector","state","types","props","args","render","type_disp","map","typ","index","selectColor","name_display","styleShape","height","width","display","cursor","borderRadius","backgroundColor","borderStyle","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderBottomColor","style","onClick","onClicked","paddingLeft","theme","primaryColor","themeBackgroundColor","secondaryBackgroundColor","styleButton","paddingTop","flex","maxWidth","minWidth","margin","padding","maxHeight","minHeight","overflowY","flexDirection","borderTopLeftRadius","marginRight","onSelect","fontSize","textAlign","borderTopRightRadius","marginLeft","borderBottomRightRadius","borderBottomLeftRadius","marginTop","onFilter","setState","forceUpdate","Streamlit","setComponentValue","bool","forEach","fam","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"kRAWMA,E,4MAEGC,MAAQ,CAACC,MAAO,EAAKC,MAAMC,KAAX,O,EAEhBC,OAAS,WAId,IAAMH,EAAQ,EAAKD,MAAMC,MAEnBI,EAAYJ,EAAMK,KAAI,SAACC,EAA2BC,GACtD,IAAIC,EACAC,EAkBAC,EA2BJ,OAzCED,EADkB,QAAhBH,EAAG,KACU,UAGAA,EAAG,KAKlBE,GADsB,IAApBF,EAAG,SACS,QAGA,YAIhBI,EAAa,CAACC,OAAO,GAAGC,MAAM,GAAIC,QAAQ,eAAeC,OAAO,WAC3C,WAAjBR,EAAG,QACLI,EAAU,2BAAOA,GAAP,IAAkBK,aAAa,GAAIC,gBAAgBR,KAE1C,aAAjBF,EAAG,QACLI,EAAa,CACXE,MAAO,EACPD,OAAQ,EACRK,gBAAiB,cACjBC,YAAa,QACbC,eAAgB,EAChBC,gBAAiB,EACjBC,iBAAkB,EAClBC,kBAAmB,GACnBC,gBAAiB,cACjBC,iBAAkB,cAClBC,kBAAmBhB,EACnBK,QAAQ,eACRC,OAAO,YAGU,WAAjBR,EAAG,QACLI,EAAU,2BAAOA,GAAP,IAAmBM,gBAAgBR,KAE/CE,EAAa,CAACC,OAAO,GAAGC,MAAM,GAAIC,QAAQ,eAAeC,OAAO,UAAWE,gBAAgBR,GAG3F,6BACE,yBACEiB,MAAK,eAAMf,GACXgB,QAAS,kBAAM,EAAKC,UAAU3B,EAAOO,MAEvC,yBAAKkB,MAAO,CAACZ,QAAQ,eAAgBe,YAAY,KAC9CnB,OASCoB,EAAU,EAAK5B,MAAf4B,MACJC,EAAe,OACfC,EAAuB,OACtBF,IACHC,EAAeD,EAAMC,aACrBC,EAAuBF,EAAMG,0BAG/B,IAAMC,EAAc,CAACtB,OAAO,GAAIK,gBAAiBc,EAAaI,WAAW,GAAGC,KAAK,EAAErB,OAAO,WAE1F,OACE,yBAAKW,MAAO,CAACW,SAAS,IAAKC,SAAS,GAAIC,OAAO,EAAGC,QAAQ,EAAEvB,gBAAgBe,EAAqBhB,aAAa,KAC5G,yBAAKU,MAAO,CAACe,UAAU,IAAKC,UAAU,GAAGC,UAAU,SAAS3B,aAAa,GAAIa,YAAY,KACtFxB,GAEH,yBAAKqB,MAAO,CAACkB,cAAc,MAAO9B,QAAQ,SACxC,yBAAKY,MAAK,2BAAMQ,GAAN,IAAkBW,oBAAoB,GAAIC,YAAY,IAAInB,QAAS,kBAAM,EAAKoB,UAAS,KAC/F,uBAAGrB,MAAO,CAACsB,SAAS,GAAGC,UAAU,WAAjC,iBAEF,yBAAKvB,MAAK,2BAAMQ,GAAN,IAAkBgB,qBAAqB,GAAIC,WAAW,IAAIxB,QAAS,kBAAM,EAAKoB,UAAS,KAC/F,uBAAGrB,MAAO,CAACsB,SAAS,GAAGC,UAAU,WAAjC,gBAGJ,yBAAKvB,MAAK,2BAAMQ,GAAN,IAAkBkB,wBAAwB,GAAGC,uBAAuB,GAAIC,UAAU,IAAI3B,QAAS,kBAAM,EAAK4B,aAClH,uBAAG7B,MAAO,CAACG,YAAY,GAAGmB,SAAS,GAAGC,UAAU,WAAhD,a,EAOArB,UAAY,SAAC3B,EAAYO,GAG/BP,EAAMO,GAAN,UAA4BP,EAAMO,GAAN,SAC5B,EAAKgD,SAAS,CAACvD,MAAOA,IACtB,EAAKwD,e,EAGCF,SAAW,WACjBG,IAAUC,kBAAkB,EAAK3D,MAAMC,OACvC,EAAKwD,e,EAGCV,SAAW,SAACa,GAClB,EAAK5D,MAAMC,MAAM4D,SAAQ,SAACC,GACxBA,EAAG,SAAeF,KAEpB,EAAKH,e,yBAzHkBM,KAmIZC,cAAwBjE,GC1IvCkE,IAAS7D,OACP,kBAAC,IAAM8D,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ba2d7555.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode,  } from \"react\"\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass TypeSelector extends StreamlitComponentBase {\n\n  public state = {types: this.props.args[\"types\"]}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n\n    const types = this.state.types\n\n    const type_disp = types.map((typ: { [x: string]: any }, index: number) => {\n      var selectColor\n      var name_display\n\n      // name display\n      if (typ['name'] === 'nan') {\n        name_display = 'no type'\n      }\n      else{\n        name_display = typ[\"name\"]\n      }\n\n      // color display\n      if (typ[\"selected\"] === true) {\n        selectColor = 'black'\n      }\n      else{\n        selectColor = 'lightgray'\n      }\n\n      var styleShape\n      styleShape = {height:12,width:12, display:'inline-block',cursor:'pointer'}\n      if (typ[\"shape\"] === 'circle') {\n        styleShape = {...styleShape,borderRadius:15, backgroundColor:selectColor}\n      }\n      if (typ[\"shape\"] === 'triangle') {\n        styleShape = {\n          width: 0,\n          height: 0,\n          backgroundColor: \"transparent\",\n          borderStyle: \"solid\",\n          borderTopWidth: 0,\n          borderLeftWidth: 6,\n          borderRightWidth: 6,\n          borderBottomWidth: 12,\n          borderLeftColor: \"transparent\",\n          borderRightColor: \"transparent\",\n          borderBottomColor: selectColor,\n          display:'inline-block',\n          cursor:'pointer'\n        }\n      }\n      if (typ[\"shape\"] === 'square'){\n        styleShape = {...styleShape, backgroundColor:selectColor}\n      }\n      styleShape = {height:12,width:12, display:'inline-block',cursor:'pointer', backgroundColor:selectColor}\n\n      return (\n      <div>\n        <div \n          style={{...styleShape}}\n          onClick={() => this.onClicked(types, index)} >\n        </div>\n        <div style={{display:\"inline-block\", paddingLeft:10}}>\n          {name_display}\n        </div>\n      </div>\n      )\n      }\n\n      \n    );\n\n    const { theme } = this.props\n    var primaryColor = \"blue\"\n    var themeBackgroundColor = \"blue\"\n     if (theme) {\n      primaryColor = theme.primaryColor\n      themeBackgroundColor = theme.secondaryBackgroundColor\n     }\n\n    const styleButton = {height:40, backgroundColor: primaryColor,paddingTop:10,flex:1,cursor:'pointer'}\n\n    return (\n      <div style={{maxWidth:250, minWidth:80, margin:0, padding:0,backgroundColor:themeBackgroundColor,borderRadius:12}}>\n        <div style={{maxHeight:150, minHeight:50,overflowY:\"scroll\",borderRadius:10, paddingLeft:10,}}>\n          {type_disp}\n        </div>\n        <div style={{flexDirection:'row', display:'flex'}}>\n          <div style={{...styleButton,borderTopLeftRadius:10, marginRight:2}} onClick={() => this.onSelect(false)}>\n            <p style={{fontSize:15,textAlign:'center'}}>deselect all</p>\n          </div>\n          <div style={{...styleButton,borderTopRightRadius:10, marginLeft:2}} onClick={() => this.onSelect(true)}>\n            <p style={{fontSize:15,textAlign:'center'}}>select all</p>\n          </div>\n        </div>\n        <div style={{...styleButton,borderBottomRightRadius:10,borderBottomLeftRadius:10, marginTop:4}} onClick={() => this.onFilter()}>\n          <p style={{paddingLeft:15,fontSize:15,textAlign:'center',}}>filter</p>\n        </div>\n      </div>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (types: any, index:number) => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    types[index][\"selected\"] = !types[index][\"selected\"]\n    this.setState({types: types})\n    this.forceUpdate()\n  }\n\n  private onFilter = () => {\n    Streamlit.setComponentValue(this.state.types)\n    this.forceUpdate()\n  }\n\n  private onSelect = (bool: boolean) => {\n    this.state.types.forEach((fam:any) => {\n      fam['selected'] = bool\n    });\n    this.forceUpdate()\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(TypeSelector)\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TypeSelector from \"./TypeSelector\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <TypeSelector />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}